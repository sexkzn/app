{"version":3,"sources":["Seo.js","Pages/BodiesPage/BodiesPage.js","Pages/BodiesPage/index.js","Pages/BodyPage/BodyPage.js","Pages/BodyPage/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Seo","title","description","charSet","lang","name","content","BodiesPage","useState","girls","setGirls","page","setPage","fetchGirls","fetch","then","res","json","data","catch","err","console","log","useEffect","chunks","chunk","id","className","dataLength","length","next","hasMore","loader","scrollableTarget","map","items","Row","item","Col","lg","to","Card","CardImg","top","width","src","avatar","alt","CardBody","CardTitle","CardSubtitle","phoneNumber","CardText","boobsSize","height","priceInOne","priceInTwo","priceInNight","Button","BodyPage","props","girl","setGirl","useParams","error","Breadcrumb","tag","listTag","BreadcrumbItem","Jumbotron","weight","priceOutOne","priceOutTwo","priceOutNight","photos","photo","routes","path","exact","render","App","Container","Navbar","color","light","expand","NavbarBrand","href","index","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5ca3705.chunk.js","sourcesContent":["import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nfunction Seo({\r\n  title,\r\n  description\r\n             }) {\r\n  return (\r\n    <Helmet>\r\n      <meta charSet='utf-8' />\r\n      <meta lang='ru' />\r\n      <title>{title}</title>\r\n      <meta name='description' content={description} />\r\n      <meta name='keywords' content='проститутки, индивидуалки, шлюхи, феи, интим, секс, казань, казани' />\r\n    </Helmet>\r\n  );\r\n}\r\n\r\nexport default Seo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport chunk from 'lodash.chunk';\r\nimport {\r\n  Card,\r\n  Jumbotron,\r\n  Row,\r\n  Col,\r\n  CardImg,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  CardSubtitle,\r\n  Button\r\n} from 'reactstrap';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Seo from \"../../Seo\";\r\n\r\nfunction BodiesPage() {\r\n  const [girls, setGirls] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n\r\n  const fetchGirls = (page) => {\r\n    fetch('/api/girls?page=' + page)\r\n      .then(res => res.json())\r\n      .then(data => setGirls([...girls, ...data.content]))\r\n      .catch(err => console.log('err', err))\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchGirls(page);\r\n  }, []);\r\n\r\n  const refresh = () => console.log('poiint')\r\n\r\n  const chunks = chunk(girls, 4);\r\n  return (\r\n      [\r\n        <Seo title={`Проститутки Индивидуалки Шлюхи Казань`} description={`Каталог лучших проституток и индивидуалок Казани. Лучшие секс и интим услуги в Казани, фотографии проверены.`} />,\r\n        <div id='scrollableDiv' className='mt-2' id>\r\n          <InfiniteScroll\r\n              dataLength={girls.length} //This is important field to render the next data\r\n              next={() => {\r\n                setPage(page + 1);\r\n                fetchGirls(page + 1);\r\n              }}\r\n              hasMore={true}\r\n              loader={<h4>Загрузка...</h4>}\r\n              scrollableTarget=\"scrollableDiv\"\r\n          >\r\n            {chunks.map(items => (\r\n                <Row>\r\n                  {items.map(item => (\r\n                      <Col className='mb-3' lg={3}>\r\n                        <NavLink className='no-decoration' to={`/girl/${item.id}`}>\r\n                          <Card>\r\n                            <CardImg className='card__img' top width src={`https://dosugkzn.xyz/${item.avatar}`} alt=\"Card image cap\" />\r\n                            <CardBody>\r\n                              <CardTitle>{item.name}</CardTitle>\r\n                              <CardSubtitle className='mb-2 blured-text'>{item.phoneNumber}</CardSubtitle>\r\n                              <CardText>\r\n                                <div>Грудь: {item.boobsSize} размер</div>\r\n                                <div>Рост: {item.height} см</div>\r\n                                <div><strong>Цена за час: {item.priceInOne} см</strong></div>\r\n                                <div><strong>Цена за 2 часa: {item.priceInTwo} см</strong></div>\r\n                                <div><strong>Цена за ночь: {item.priceInNight} см</strong></div>\r\n                              </CardText>\r\n                              <Button>Смотреть</Button>\r\n                            </CardBody>\r\n                          </Card>\r\n                        </NavLink>\r\n                      </Col>\r\n                  ))}\r\n                </Row>\r\n            ))}\r\n          </InfiniteScroll>\r\n        </div>\r\n      ]\r\n  );\r\n}\r\n\r\nexport default BodiesPage;\r\n","import BodiesPage from \"./BodiesPage\";\r\n\r\nexport default BodiesPage;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {\r\n  Jumbotron,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n} from \"reactstrap\";\r\nimport Seo from \"../../Seo\";\r\n\r\nfunction BodyPage(props) {\r\n  const [girl, setGirl] = useState(null);\r\n  const { id } = useParams();\r\n\r\n  useEffect(() => {\r\n    fetch('/api/girls/' + id + '?page=2')\r\n      .then(res => res.json())\r\n      .then(data => setGirl(data))\r\n      .catch(err => console.error(err))\r\n  }, []);\r\n\r\n\r\n  return (\r\n      [\r\n        <Seo title={`SexKZN ${girl ? girl.name : ''}`} description={girl ? girl.description : ''} />,\r\n        girl &&\r\n        <div className='mt-2'>\r\n          <Breadcrumb tag=\"nav\" listTag=\"div\">\r\n            <NavLink className='breadcrumb-item' tag=\"a\" to=\"/\">Главная</NavLink>\r\n            <BreadcrumbItem tag=\"a\">{girl.name}</BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <Jumbotron className='mt-2'>\r\n            <h1 className=\"girl-name\">{girl.name} <small className='blured-text-2'>{girl.phoneNumber}</small></h1>\r\n            <ul className='characteristics'>\r\n              <li>\r\n                Грудь: {girl.boobsSize} размер\r\n              </li>\r\n              <li>\r\n                Рост: {girl.height} см\r\n              </li>\r\n              <li>\r\n                Вес: {girl.weight} кг\r\n              </li>\r\n            </ul>\r\n            <div className='d-flex justify-content-between service-list'>\r\n              <ul>\r\n                <li>\r\n                  Цена за час (аппартаменты): {girl.priceInOne}\r\n                </li>\r\n                <li>\r\n                  Цена за 2 часа (аппартаменты): {girl.priceInTwo}\r\n                </li>\r\n                <li>\r\n                  Цена за ночь (аппартаменты): {girl.priceInNight}\r\n                </li>\r\n              </ul>\r\n\r\n              <ul>\r\n                {girl.priceOutOne && (\r\n                    <li>\r\n                      Цена за час (выезд): {girl.priceOutOne}\r\n                    </li>\r\n                )}\r\n                {girl.priceOutTwo && (\r\n                    <li>\r\n                      Цена за 2 часа (выезд): {girl.priceOutTwo}\r\n                    </li>\r\n                )}\r\n                {girl.priceOutNight && (\r\n                    <li>\r\n                      Цена за ночь (выезд): {girl.priceOutNight}\r\n                    </li>\r\n                )}\r\n              </ul>\r\n            </div>\r\n            <p className=\"descr lead\">{girl.description}</p>\r\n            <div className='d-flex align-items-start flex-wrap'>\r\n              {girl.photos.map(photo => <img className='card__img' src={'https://dosugkzn.xyz' + photo} alt=\"\"/>)}\r\n            </div>\r\n          </Jumbotron>\r\n        </div>\r\n      ]\r\n  );\r\n}\r\n\r\nexport default BodyPage;\r\n","import BodyPage from \"./BodyPage\";\r\n\r\nexport default BodyPage;\r\n","import React from 'react';\r\nimport BodiesPage from \"../Pages/BodiesPage\";\r\nimport BodyPage from \"../Pages/BodyPage\";\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    exact: true,\r\n    render: props => <BodiesPage {...props} />\r\n  },\r\n  {\r\n    path: '/girl/:id',\r\n    render: props => <BodyPage {...props} />\r\n  }\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport routes from \"./routes\";\r\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Container>\r\n            <Navbar color=\"light\" light expand=\"md\">\r\n              <NavbarBrand href=\"/\">dosugkzn.xyz</NavbarBrand>\r\n            </Navbar>\r\n            {routes.map((props, index) => <Route key={index} {...props} />)}\r\n          </Container>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}