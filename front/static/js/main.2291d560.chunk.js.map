{"version":3,"sources":["components/GirlList.js","components/GirlItem.js","App.js","serviceWorker.js","index.js"],"names":["GirlList","state","pictures","fetch","then","res","json","content","map","elem","style","to","id","src","avatar","display","margin","name","setState","this","Component","GirlItem","params","props","match","images","photos","key","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSA+CeA,E,YA3CX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,SAAU,IAHJ,E,iFAOO,IAAD,OAChBC,MAAM,kCACDC,MAAK,SAAAC,GACF,OAAOA,EAAIC,UACZF,MAAK,SAAAE,GACR,IAAIJ,EAAWI,EAAKC,QAAQC,KAAI,SAAAC,GAC5B,OACI,yBAAKC,MAAO,CAAC,aAAc,WACvB,6BACI,kBAAC,IAAD,CAAMC,GAAI,oBAAeF,EAAKG,KAC9B,yBAAKC,IAAKJ,EAAKK,OAAQJ,MAAO,CAACK,QAAS,QAASC,OAAQ,YAG7D,6BACI,kBAAC,IAAD,CAAML,GAAI,oBAAeF,EAAKG,KAC1B,8BAAOH,EAAKQ,QAGpB,gCAIZ,EAAKC,SAAS,CAAChB,SAAUA,S,+BAK7B,OACI,6BACKiB,KAAKlB,MAAMC,c,GArCLkB,aC+BRC,E,YA9BX,aAAe,IAAD,8BACV,+CACKpB,MAAQ,CACTC,SAAU,IAHJ,E,iFAOO,IAAD,OACCoB,EAAaH,KAAKI,MAA3BC,MAASF,OACjBnB,MAAM,kCAAoCmB,EAAOV,IAC5CR,MAAK,SAAAC,GACF,OAAOA,EAAIC,UACZF,MAAK,SAAAE,GACR,IAAImB,EAASnB,EAAKoB,OAAOlB,KAAI,SAAAC,GACzB,OAAO,6BAAK,yBAAKkB,IAAKlB,EAAMI,IAAKJ,EAAMC,MAAO,CAACK,QAAS,QAASC,OAAQ,cAE7E,EAAKE,SAAS,CAACO,OAAQA,S,+BAK3B,OACI,6BACKN,KAAKlB,MAAMwB,Y,GAxBLL,aCqCRQ,MAlCf,WACI,OACI,kBAAC,IAAD,KACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMjB,GAAG,UAAT,gDAIR,6BASA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAUnB,GAAG,YAEjB,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,SAASC,UAAW/B,IAEtC,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,aAAaC,UAAWV,QCpB1CW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MACvB,2DCZNY,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.2291d560.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass GirlList extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pictures: [],\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('https://dosugkzn.xyz/api/girls')\r\n            .then(res => {\r\n                return res.json();\r\n            }).then(json => {\r\n            let pictures = json.content.map(elem => {\r\n                return (\r\n                    <div style={{\"text-align\": \"center\"}}>\r\n                        <div>\r\n                            <Link to={'/girls/' + `${elem.id}`}>\r\n                            <img src={elem.avatar} style={{display: \"block\", margin: \"auto\"}}/>\r\n                            </Link>\r\n                        </div>\r\n                        <div >\r\n                            <Link to={'/girls/' + `${elem.id}`}>\r\n                                <text>{elem.name}</text>\r\n                            </Link>\r\n                        </div>\r\n                        <p/>\r\n                    </div>\r\n                );\r\n            });\r\n            this.setState({pictures: pictures})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.pictures}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default GirlList;","import React, {Component} from 'react'\r\nimport {Link, useParams} from \"react-router-dom\";\r\n\r\nclass GirlItem extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            pictures: [],\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        fetch('https://dosugkzn.xyz/api/girls/' + params.id)\r\n            .then(res => {\r\n                return res.json();\r\n            }).then(json => {\r\n            let images = json.photos.map(elem => {\r\n                return <div><img key={elem} src={elem} style={{display: \"block\", margin: \"auto\"}}/></div>\r\n            });\r\n            this.setState({images: images})\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.images}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default GirlItem;","import React from 'react';\nimport {BrowserRouter as Router, Link, Redirect, Route, Switch} from \"react-router-dom\";\nimport './App.css';\nimport GirlList from \"./components/GirlList\";\nimport GirlItem from \"./components/GirlItem\";\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/girls\">Девушки</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n                <Switch>\n                    <Route exact path=\"/\">\n                        <GirlList/>\n                        <Redirect to=\"/girls\"/>\n                    </Route>\n                    <Route exact path=\"/girls\" component={GirlList}>\n                    </Route>\n                    <Route exact path=\"/girls/:id\" component={GirlItem}>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}